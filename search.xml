<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git 子模块</title>
      <link href="/2019/08/26/knowledge/git/gitSubmodle/"/>
      <url>/2019/08/26/knowledge/git/gitSubmodle/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-子模块"><a href="#Git-子模块" class="headerlink" title="Git 子模块"></a>Git 子模块</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>git子模块</code>，即 <code>git submodule</code>, 是一种在一个 <code>git</code> 仓库中嵌套另外一个 <code>git</code> 仓库代码的实现方式。</p><p>有时候我们需要将一些代码放到一个仓库中，由其他人进行开发和维护，而在另外一个项目中，只需要引入这个仓库中的代码，并不对代码进行修改这种情形。我们就可以使用 <code>git submodule</code> 来实现。</p><p>形象一点说明：我要搭建一个博客，博客的结构如下</p><p>blog<br>    ├── content<br>    ├── index.html<br>    ├── public<br>    ├── theme<br>    └── conf文件</p><p>里面的 <code>theme</code> 文件夹内容是我的博客主题，可以自己手动去写，也可以找好看的主题进行魔改。但是在魔改后我又想提交到自己的仓库进行存储。这种时候可以把 <code>theme</code> 文件夹下面的代码放到一个 <code>git</code> 仓库中。然后整个博客工程放到一个 <code>git</code> 仓库中。 使用 <code>git submodule</code> 结合起来。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><p>子模块的使用很简单，拿到子模块的 <code>git</code> 仓库地址。在项目的根文件夹下执行添加 <code>git submodule</code> 命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> git submodule add -b develop https://code.xxxxxx.com.cn/lokya-theme.git theme/lokya-theme</span></span><br></pre></td></tr></table></figure><p>解释下上面的命令，上面的命令是个组合命令，实现的效果是给当前项目添加子模块，添加的是子模块的 <code>develop</code> 分支，将代码放到 <code>theme</code> 文件夹下，名称为 <code>lokya-theme</code>。</p><ul><li>git submodule add <a href="https://code.xxxxxx.com.cn/lokya-theme.git" target="_blank" rel="noopener">https://code.xxxxxx.com.cn/lokya-theme.git</a><br>  添加仓库</li><li>git submodule add -b develop <a href="https://code.xxxxxx.com.cn/lokya-theme.git" target="_blank" rel="noopener">https://code.xxxxxx.com.cn/lokya-theme.git</a><br>  添加仓库的 <code>develop</code> 代码</li><li>git submodule add <a href="https://code.xxxxxx.com.cn/lokya-theme.git" target="_blank" rel="noopener">https://code.xxxxxx.com.cn/lokya-theme.git</a> theme/lokya-theme<br>  将代码放到theme文件夹中，命名为 <code>lokya-theme</code></li></ul><p>这样就把子模块添加进去了。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>子模块的初始化可以使用一下命令，也可直接组合使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> git <span class="built_in">clone</span> &lt;repository&gt; --recursive 递归的方式克隆整个项目</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> git submodule init 初始化子模块</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> git submodule update 更新子模块</span></span><br></pre></td></tr></table></figure><p>组合使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> git submodule update --init --recursive</span></span><br></pre></td></tr></table></figure><h3 id="多个子模块使用"><a href="#多个子模块使用" class="headerlink" title="多个子模块使用"></a>多个子模块使用</h3><p>可以使用多个子模块，使用 <code>git submodule add</code> 添加多个 git 子模块</p><h3 id="统一操作子模块"><a href="#统一操作子模块" class="headerlink" title="统一操作子模块"></a>统一操作子模块</h3><p>可以使用 <code>git submodule foreach</code> 来进行批量操作子模块，比如所有子模块切换分支和拉取代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> git submodule foreach git checkout develop</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> git submodule foreach git pull</span></span><br></pre></td></tr></table></figure><h2 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在多个子模块进行 <code>docker</code> 打镜像的时候，初始化仓库拉取不到代码。</p><p>由于在 <code>runner</code> 中设置不了 <code>git</code> 仓库的账号密码，拉取不到。</p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>由于我这边子模块和主工程的仓库在同一个账号下，于是修改 <code>.gitmodules</code> 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[submodule &quot;theme/lokya-theme&quot;]</span><br><span class="line">path = theme/lokya-theme</span><br><span class="line">url = https://code.xxxxxx.com.cn/lokya-theme.git</span><br><span class="line">branch = develop</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[submodule &quot;theme/lokya-theme&quot;]</span><br><span class="line">path = theme/lokya-theme</span><br><span class="line">url = ../../lokya-theme.git</span><br><span class="line">branch = develop</span><br></pre></td></tr></table></figure><p>通过相对路径去获取 <code>git</code> 仓库，这样可以默认使用同一套账号密码，子模块也可以进行代码拉取。</p><h2 id="反思总结"><a href="#反思总结" class="headerlink" title="反思总结"></a>反思总结</h2><p><code>git submodule</code> 是一种很好的解决多个库拆分、组合的方式，可以完全避免代码冲突，多人权限维护等。</p><p>但是 <code>git submodule</code> 的使用时候要注意每次切换分支都会将子模块的提交指向游离态，需要手动去切换分支拉取最新的子模块代码。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端项目拆库</title>
      <link href="/2019/08/26/knowledge/git/gitRepoSplit/"/>
      <url>/2019/08/26/knowledge/git/gitRepoSplit/</url>
      
        <content type="html"><![CDATA[<h1 id="前端代码拆库"><a href="#前端代码拆库" class="headerlink" title="前端代码拆库"></a>前端代码拆库</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="Monorepo-和-Multirepo"><a href="#Monorepo-和-Multirepo" class="headerlink" title="Monorepo 和 Multirepo"></a>Monorepo 和 Multirepo</h3><p><strong>Monorepo</strong></p><p><code>Monorepo</code> 是管理项目代码的一个方式，指在一个项目仓库 (<code>repo</code>) 中管理多个模块/包 (<code>package</code>)，不同于常见的每个模块建一个 <code>repo</code>。而 <code>lerna</code> 是 <code>Monorepo</code> 目前最好的一种解决方案，通过 <code>lerna</code> 的一些命令，例如 <code>lerna run xxx</code> 可以统一对各个模块进行操作。</p><p><strong>Multirepo</strong></p><p><code>Multirepo</code> 从字面意思上来说就是多个 <code>repo</code> ，每个模块或者项目创建各自的仓库，单独开发维护，相互之间调用只能以npm包的形式或者使用 <code>git</code> 子模块。</p><hr><p>我们的项目之前是基于 <code>monorepo</code> 形式创建的，即多个子工程在一个项目中管理，然后使用 <code>lerna</code> 管理工具，统一对 packages 文件夹下面的子模块进行管理。</p><p>由于项目前后端分离、前端工程和后端工程版本要保持对应一致、要部署到多个不同的环境、同时我们又要引入其他部门的基础服务代码，这一系列的要求就导致项目使用monorepo的模式进行不下去。</p><p>举个例子</p><ol><li>开发环境和测试环境配置不相同。</li><li>测试环境中的基础服务包版本和开发环境中版本不一致，即在 develop 环境，使用的某个基础服务包版本为 1.1.9， test 环境使用的版本是1.0.9，因为两个环境的后端版本不相同，前端也要保持统一。</li><li>开发在各自模块下进行开发，每个团队要在自己组所属模块下面开发，不方便区分哪些代码进行开发，哪些代码进行提测。</li></ol><p>基于以上情况，这边对代码进行拆分。</p><h2 id="仓库、分支介绍"><a href="#仓库、分支介绍" class="headerlink" title="仓库、分支介绍"></a>仓库、分支介绍</h2><p>将代码拆分成以下几种 <code>git</code> 仓库</p><ul><li><strong>front-code</strong>: 前端纯净仓库，不包含任何业务代码，所有新模块都基于此代码进行初始化。</li><li><strong>front-[模块缩写]</strong>: 各个子模块的工程，只包含每个模块的功能代码。</li><li><strong>front-boot</strong>: 前端基础模块仓库，项目所需要的一些公共组件，方法，基础引用都在此模块中，每个子模块都要引入的模块。</li><li><strong>front-core</strong>: 前端框架仓库，前端测试环境，开发环境，发布环境都基于此仓库进行部署。</li></ul><p>原本项目中没有<code>boot</code>这个模块，综合考虑下来，应该建立一个公共模块，让所有的子模块都依赖，并且将公共内容放到这个模块中，之后对于公共内容的新增、修改都只需要改动这一个模块，然后发布 <code>npm包</code> ，小版本直接升级依赖即可, boot 这个模块要引入到各个模块的 <code>devDependencies</code> 中，可以防止重复打包.</p><p>顺便拆了个纯净仓库，项目以后的开发会有其他项目，可以直接基于这个项目工程拿取代码进行开发，基本的配置都配置完成。‘</p><p><code>front-core</code> 这个仓库 分成 <code>master</code> <code>test</code> <code>develop</code> 这几个分支，其中 <code>master</code> 分支为正式环境发布分支，没有任何业务代码，全部引入的是文档打版的 <code>npm包</code>。 <code>test</code> 分支为测试环境的发布分支，使用 <code>git子模块</code> 将各个子模块的 <code>test</code> 分支代码进行引入。 <code>develop</code> 分支为开发环境的发布分支，同样使用 <code>git子模块</code> 将各个子模块的 <code>develop</code> 分支代码进行引入。</p><p><code>front-[模块缩写]</code>这种命名的仓库就分配到各个组，由各个组创建 develop 和 test 分支进行开发，完全解决组之间代码冲突的问题。</p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>各组负责自己模块，避免组间冲突，同时减轻前端管理组的压力。</li><li>可针对各种前端发布条件进行修改，各组、依赖模块、基础模块等都完全区分开，不相互影响。</li><li>前端启动项目所消耗时间减少，提升开发效率。</li><li>公共模块提取了代码，减少冗余代码，项目更清晰简洁。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>各组人员的 <code>git</code> 水准参差不齐， 对各组负责人来说压力增大。</li><li>组件模块相互依赖，需要实时沟通，一旦版本不统一，最终会出现多版本打包。</li></ol><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li>Monorepo</li><li>Multirepo</li><li>Git Submodule</li><li>Git Flow</li><li>devDependencies 和 dependencies 的区别</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整个拆库从构思到测试、建库、正式发布、讲解持续了近2周。只要思路通了，整个模式都玩的通，剩下的就是完善模块，让模块更纯粹和简洁。</p><p>后续还准备将 front-code 做成脚手架，使用脚手架创建项目，将一些简单的命令集成进来，使得管理方便。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 不能推送远程分支</title>
      <link href="/2019/08/07/knowledge/git/gitTips1/"/>
      <url>/2019/08/07/knowledge/git/gitTips1/</url>
      
        <content type="html"><![CDATA[<h1 id="dst-refspec-XXX-matches-more-than-one"><a href="#dst-refspec-XXX-matches-more-than-one" class="headerlink" title="dst refspec XXX matches more than one"></a>dst refspec XXX matches more than one</h1><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>项目中有个分支是 <code>1.1.0</code> 分支，用来进行升级和版本代码保留，这个分支最近被某个<code>坑货</code>给玩坏了，发现我本地的代码是完整保留的，于是要将代码推送到远程。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>我在执行下面的代码之后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete 1.1.0</span><br></pre></td></tr></table></figure><p>报错提示：</p><p>dst refspec XXX matches more than one</p><p>意思大概是具体的引用匹配到的不止一个。</p><p>查询相关资料发现，不推荐<code>分支</code>和 <code>tag</code> 名字完全一样。。。</p><p>当远程仓库同时存在相同名称的 <code>branch</code> 和 <code>tag</code> 时，不指明绝对路径的前提下，操作这个名称的 <code>branch</code> 和 <code>tag</code> 都会出现这个问题。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>我在项目中去搜索发现同样命名为 <code>1.1.0</code>的<code>branch</code>和命名为 <code>1.1.0</code>的 <code>tag</code> ，于是在删除远程分支的时候，搜索到的匹配就不只一个。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="1、删除"><a href="#1、删除" class="headerlink" title="1、删除"></a>1、删除</h3><ol><li><p>检出 <code>tag</code>,然后进行重命名或者基于它新建 <code>tag</code> 。</p></li><li><p>然后再通过命令去删除远程分支。</p></li><li><p>推送<code>tag</code>到远程</p></li></ol><h3 id="2、使用绝对路径"><a href="#2、使用绝对路径" class="headerlink" title="2、使用绝对路径"></a>2、使用绝对路径</h3><ol><li>直接指明绝对路径</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin :refs/heads/1.1.0</span><br></pre></td></tr></table></figure><ol start="2"><li>如果是推代码带<code>tag</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin :refs/tags/1.1.0</span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>我比较推荐使用第二种方法，当然这次的做法可以直接去仓库进行手动分支删除，一切可视化操作，但是使用命令去实现更能了解一些<code>git</code>的知识。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端版本控制</title>
      <link href="/2019/08/05/knowledge/git/versionControl/"/>
      <url>/2019/08/05/knowledge/git/versionControl/</url>
      
        <content type="html"><![CDATA[<h1 id="前端版本控制"><a href="#前端版本控制" class="headerlink" title="前端版本控制"></a>前端版本控制</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>公司代码采用 <code>monorepo</code> 模式，在 <code>package</code> 文件夹下管理各个模块，整个项目采用 <code>lerna</code> 进行管理。</p><p>最近项目也到稳定期，需要进行发版和发布，对于项目来说，直接使用某一个版本的<code>npm</code>包即可，于是要制定一个版本控制的规范。</p><p>公司的发布源设置为私有源，但是想了想这个方式同样适用于 <code>npm</code> 公有源。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>使用语义化版本控制(<code>Semantic Versioning</code>)，你必须先有定义好的公共 API 。这可以透过文件定义或代码强制要求来实现(API 文档)。无论如何，这套 API 的清楚明了是十分重要的。一旦你定义了公共 API，你就可以透过修改相应的版本号来向大家说明你的修改。考虑使用这样的版本号格式：X.Y.Z （主版本号.次版本号.修订号），先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸。</p></blockquote><h2 id="版本号递增规则"><a href="#版本号递增规则" class="headerlink" title="版本号递增规则"></a>版本号递增规则</h2><ul><li>主版本号：当你做了不兼容的 API 修改，递增主版本号</li><li>次版本号：当你做了向下兼容的功能性新，递增次版本号</li><li>修订号：当你做了向下兼容的问题修正，递增修订号</li></ul><h2 id="语义化版本控制规范"><a href="#语义化版本控制规范" class="headerlink" title="语义化版本控制规范"></a>语义化版本控制规范</h2><ul><li>使用语义化版本控制的软件<code>必须</code>定义公共 API。该 API 可以在代码中被定义或出现于严谨的文件内。无论何种形式都应该力求精确且完整。</li><li>标准的版本号<code>必须</code>采用 X.Y.Z 的格式，其中 X、Y 和 Z 为非负的整数，且<code>禁止</code>在数字前方补零。X 是主版本号、Y 是次版本号、而 Z 为修订号。每个元素<code>必须</code>以数值来递增。例如：1.9.1 -&gt; 1.10.0 -&gt; 1.11.0。</li><li>标记版本号的软件发行后，<code>禁止</code>改变该版本软件的内容。任何修改都<code>必须</code>以新版本发行。</li><li>主版本号为零（0.y.z）的软件处于开发初始阶段，一切都可能随时被改变。这样的公共 API 不应该被视为稳定版。<strong>以 0.1.0 作为你的初始化开发版本，并在后续的每次发行时递增次版本号</strong></li><li>1.0.0 的版本号用于界定公共 API 的形成。这一版本之后所有的版本号更新都基于公共 API 及其修改内容。<strong>当你的软件被用于正式环境，它应该已经达到了 1.0.0 版。</strong></li><li>修订号 Z（x.y.Z | x &gt; 0）<code>必须</code>在只做了向下兼容的修正时才递增。这里的修正指的是针对不正确结果而进行的内部修改。</li><li>次版本号 Y（x.Y.z | x &gt; 0）<code>必须</code>在有向下兼容的新功能出现时递增。在任何公共 API 的功能被标记为弃用时也<code>必须</code>递增。也<code>可以</code>在内部程序有大量新功能或改进被加入时递增，其中<code>可以</code>包括修订级别的改变。每当次版本号递增时，修订号<code>必须</code>归零。</li><li>主版本号 X（X.y.z | X &gt; 0）<code>必须</code>在有任何不兼容的修改被加入公共 API 时递增。其中<code>可以</code>包括次版本号及修订级别的改变。每当主版本号递增时，次版本号和修订号<code>必须</code>归零。</li><li>先行版本号<code>可以</code>被标注在修订版之后，先加上一个连接号再加上一连串以句点分隔的标识符号来修饰。标识符号<code>必须</code>由 ASCII 码的英数字和连接号 [0-9A-Za-z-] 组成，且<code>禁止</code>留白。数字型的标识符号<code>禁止</code>在前方补零。先行版的优先级低于相关联的标准版本。被标上先行版本号则表示这个版本并非稳定而且可能无法达到兼容的需求。范例：1.0.0-alpha、1.0.0-alpha.1、1.0.0-0.3.7、1.0.0-x.7.z.92。</li><li>版本编译信息<code>可以</code>被标注在修订版或先行版本号之后，先加上一个加号再加上一连串以句点分隔的标识符号来修饰。标识符号<code>必须</code>由 ASCII 的英数字和连接号 [0-9A-Za-z-] 组成，且<code>禁止</code>留白。当判断版本的优先层级时，版本编译信息可被忽略。因此当两个版本只有在版本编译信息有差别时，属于相同的优先层级。范例：1.0.0-alpha+001、1.0.0+20130313144700、1.0.0-beta+exp.sha.5114f85。</li><li>版本的优先层级指的是不同版本在排序时如何比较。判断优先层级时，<code>必须</code>把版本依序拆分为主版本号、次版本号、修订号及先行版本号后进行比较。由左到右依序比较每个标识符号，第一个差异值用来决定优先层级：主版本号、次版本号及修订号以数值比较，例如：1.0.0 &lt; 2.0.0 &lt; 2.1.0 &lt; 2.1.1。当主版本号、次版本号及修订号都相同时，改以优先层级比较低的先行版本号决定。例如：1.0.0-alpha &lt; 1.0.0。有相同主版本号、次版本号及修订号的两个先行版本号，其优先层级<code>必须</code>透过由左到右的每个被句点分隔的标识符号来比较，直到找到一个差异值后决定：只有数字的标识符号以数值高低比较，有字母或连接号时则逐字以 ASCII 的排序来比较。数字的标识符号比非数字的标识符号优先层级低。若开头的标识符号都相同时，栏位比较多的先行版本号优先层级比较高。范例：1.0.0-alpha &lt; 1.0.0-alpha.1 &lt; 1.0.0-alpha.beta &lt; 1.0.0-beta &lt; 1.0.0-beta.2 &lt; 1.0.0-beta.11 &lt; 1.0.0- rc.1 &lt; 1.0.0。</li></ul><h2 id="版本号信息"><a href="#版本号信息" class="headerlink" title="版本号信息"></a>版本号信息</h2><ul><li><strong>alpha</strong>：内部测试版。α是希腊字母的第一个，表示最早的版本，一般用户不要下载这个版本，这个版本包含很多BUG，功能也不全，主要是给开发人员和测试人员测试和找BUG用的。</li><li><strong>beta</strong>：公开测试版。β是希腊字母的第二个，顾名思义，这个版本比alpha版发布得晚一些，主要是给“部落”用户和忠实用户测试用的，该版本任然存在很多BUG，但是相对alpha版要稳定一些。这个阶段版本的软件还会不断增加新功能。如果你是发烧友，可以下载这个版本。</li><li><strong>RC</strong>(Release Candidate)：候选版本。该版本又较beta版更进一步了，该版本功能不再增加，和最终发布版功能一样。这个版本有点像最终发行版之前的一个类似预览版，这个的发布就标明离最终发行版不远了。作为普通用户，如果你很急着用这个软件的话，也可以下载这个版本。</li><li><strong>stable</strong>：稳定版。在开源软件中，都有stable版，这个就是开源软件的最终发行版，用户可以放心大胆的用了。</li><li><strong>RELEASE</strong>：最终版本。在前面版本的一系列测试版之后，终归会有一个正式版本，是最终交付用户使用的一个版本。该版本有时也称为标准版。一般情况下，Release不会以单词形式出现在软件封面上，取而代之的是符号®。</li></ul><h2 id="发版流程"><a href="#发版流程" class="headerlink" title="发版流程"></a>发版流程</h2><ol><li>当开发达到发版要求、对某个版本进行了bug修复，或者新增相关内容之后，需要进行发版。</li><li>所有模块版本从 <code>1.0.0</code> 开始，基本的修改和bug修复后版本最后一位加1，即 <code>1.1.0</code> &gt; <code>1.1.1</code>。</li><li>当需要大版本发布时候，各组需要对中间版本进行升级，最后版本从0开始，即 <code>1.1.X</code> &gt; <code>1.2.0</code>。</li><li><strong>禁止</strong>在同一版本多次发布内容，每次发版版本号加1，请勿随意增减版本号。</li></ol><h2 id="发布操作"><a href="#发布操作" class="headerlink" title="发布操作"></a>发布操作</h2><h4 id="源"><a href="#源" class="headerlink" title="源"></a>源</h4><p>将本项目发布到<code>nexus npm</code>私有源仓库</p><h4 id="进入到发布模块"><a href="#进入到发布模块" class="headerlink" title="进入到发布模块"></a>进入到发布模块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> packages/&lt; xxxx module&gt;</span><br><span class="line">$ yarn transpile</span><br></pre></td></tr></table></figure><h4 id="修改版本号"><a href="#修改版本号" class="headerlink" title="修改版本号"></a>修改版本号</h4><p>修改模块文件下<code>package.json</code>中 <code>version</code>字段的值，手动+1</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"version": "1.1.0",</span><br><span class="line">// 手动加1</span><br><span class="line">"version": "1.1.1",</span><br></pre></td></tr></table></figure><h4 id="生成-auth-hash"><a href="#生成-auth-hash" class="headerlink" title="生成 auth hash**"></a>生成 <code>auth hash</code>**</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -n <span class="string">'username:password'</span> | openssl base64</span><br><span class="line"><span class="comment"># 得到 40位编码</span></span><br><span class="line">XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</span><br></pre></td></tr></table></figure><p><code>username</code> 和<code>password</code>需要找项目负责人进行提供。</p><h4 id="配置npm-config"><a href="#配置npm-config" class="headerlink" title="配置npm config"></a>配置npm config</h4><p>执行如下命令将上面的配置加入到<code>node.js</code>全局环境变量配置文件<code>.npmrc</code>中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm config edit</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">email=your email</span><br><span class="line">always-auth=true</span><br><span class="line">_auth=yourbase64hashcode</span><br></pre></td></tr></table></figure><h4 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm publish</span><br></pre></td></tr></table></figure><h4 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h4><ol><li><p>打开提供的源地址地址</p></li><li><p>找到自己刚刚发布的包</p></li><li><p>点击发布模块进入，看到最新版本已经改变，即为发布成功。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 版本控制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端分支管理</title>
      <link href="/2019/08/05/knowledge/git/gitManage/"/>
      <url>/2019/08/05/knowledge/git/gitManage/</url>
      
        <content type="html"><![CDATA[<h1 id="前端分支管理"><a href="#前端分支管理" class="headerlink" title="前端分支管理"></a>前端分支管理</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近要对前端分支管管理进一步规范化，于是就是现在公司项目中的分支管理进行总结和扩展，设计分支和管理规范。</p><p>由于项目采用 <code>monorepo</code> 模式，各个分组代码维护在 <code>package</code> 下面各个模块中，要做到各组开发方便，不同组间不干扰，同时也要可以实时测试开发环境，而且发版发布稳定版本，于是就指定如下的分支管理规范。</p><p>项目中对权限有所管控，由于部分人员的<code>git</code>水准实在不敢恭维，于是只有小组leader可以进行合并、升级等操作。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>软件的版本控制以及分支管理贯穿于整个软件产品的生命周期，日常的项目管理对于开发团队能否有节奏且顺利的交付软件也很重要。</p><p>版本控制有很多种，例如我们常见的<code>Git</code>、<code>SVN</code>、<code>VSS</code>等，本项目中主要使用<code>Git</code> 进行版本控制。</p><p><code>Git</code>分支管理模型有三个，即<code>GitFlow</code>、<code>GitLabFlow</code>、<code>GitHubFlow</code>。下面将介绍这三种分支模型的原理，使用场景和优缺点等</p><p><strong>GitFlow</strong></p><hr><p><code>GitFlow</code> 是最早诞生并得到广泛应用的一种工作流程。</p><p>该模型中存在两种长期分支：<code>master</code> 和 <code>develop</code>。 <code>master</code>中存放对外发布的版本，只有稳定的发布版本才会合并到<code>master</code>中。 <code>develop</code>用于日常开发，存放最新的开发版本。</p><p>也存在三种临时分支：<code>feature</code>, <code>hotfix</code>, <code>release</code>。</p><ul><li><code>feature</code>分支是为了开发某个特定功能，从<code>develop</code>分支中切出，开发完成后合并到<code>develop</code>分支中。</li><li><code>hotfix</code>分支是修复发布后发现的Bug的分支，从<code>master</code>分支中切出，修补完成后再合并到<code>master</code>和<code>develop</code>分支。</li><li><code>release</code>分支指发布稳定版本前使用的预发布分支，从<code>develop</code>分支中切出，预发布完成后，合并到<code>develop</code>和<code>master</code>分支中。</li></ul><p>优点：</p><ul><li><code>feature</code> 分支使开发代码隔离，可以独立的完成开发、构建、测试</li><li><code>feature</code> 分支开发周期长于<code>release</code>时，可避免未完成的<code>feature</code>进入生产环境</li></ul><p>缺点：</p><ul><li>无法支持持续发布。</li><li>过于复杂的分支管理，加重了开发者的负担，使开发者不能专注开发。</li></ul><p><strong>GitHubFlow</strong></p><hr><p><code>GitHubFlow</code>分支模型只存在一个<code>master</code>主分支，日常开发都合并至<code>master</code>，永远保持其为最新的代码且随时可发布的。</p><ul><li>在需要添加或修改代码时， 基于<code>master</code>创建分支，提交修改。</li><li>创建<code>Pull Request</code>，所有人讨论和审查你的代码。</li><li>然后部署到生产环境中进行验证。</li><li>待验证通过后合并到<code>master</code>分支中。</li></ul><p>这个分支模型的优势在于简洁易理解，将<code>master</code>作为核心的分支，代码更新持续集成至<code>master</code>上。根据目前收集到的反应来看，得到了更多的好评，认为<code>GitHubFlow</code>分支模型更加轻便快捷。</p><p><strong>GitLabFlow</strong></p><hr><p><code>GitLabFlow</code> 是<code>GitFlow</code>和<code>GitHubFlow</code>的结合,它吸取了两者的优点，既有适应不同开发环境的弹性，又有单一主分支的简单和便利。</p><p>该模型采取上游优先的原则，即只存在一个<code>master</code>主分支，它是所以分支的上游。只有上游分支采纳的变动才能应用到其他分支。</p><ul><li>对于持续发布的项目，建议在<code>master</code>之外再建立对应的环境分支，如预生产环境<code>pre-production</code>，生产环境<code>production</code>。</li><li>对于版本发布的项目，建议基于<code>master</code>创建稳定版本对应的分支，如<code>stable-1</code>，<code>stable-2</code>。</li></ul><h2 id="分支命名"><a href="#分支命名" class="headerlink" title="分支命名"></a>分支命名</h2><table><thead><tr><th style="text-align:left">前缀</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">master</td><td style="text-align:left">主分支，可用的、稳定的、可直接发布的版本</td></tr><tr><td style="text-align:left">develop</td><td style="text-align:left">开发主分支，最新的代码分支</td></tr><tr><td style="text-align:left">publish</td><td style="text-align:left">稳定发布分支</td></tr><tr><td style="text-align:left">模块名称-dev</td><td style="text-align:left">模块开发主分支</td></tr><tr><td style="text-align:left">模块名称-工号</td><td style="text-align:left">模块下个人开发分支</td></tr><tr><td style="text-align:left">release-**</td><td style="text-align:left">预发布分支</td></tr><tr><td style="text-align:left">hotfix-**</td><td style="text-align:left">已发布bug修复分支</td></tr><tr><td style="text-align:left">1.x.x</td><td style="text-align:left">例如1.1.x分支用于保留1.1.x版本中所有模块代码</td></tr></tbody></table><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><ul><li><p>主分支 <code>develop</code>,  <code>master</code>, <code>publish</code>全部被保护起来，禁止直接修改主分支以及把本地分支 push 到主分支。</p></li><li><p>主分支 <code>develop</code>,只能在 Gitlab 上通过 MergeRequests发起合并请求，并且只能由各组前端负责人在 Gitlab 上做合并。</p></li><li><p>主分支<code>master</code>,只能每天由负责人进行合并<code>develop</code> 到 <code>master</code>。</p></li><li><code>1.1.x</code> 分支可以合并到除了<code>master</code>、<code>publish</code> 外的其他分支，一般通过这个分支进行升级相关包和文件。</li><li><code>xxxx-dev</code> 分支可以发起合并请求到 <code>develop</code>.  禁止其他分支(例如: <code>feature-xxx</code>) 合并到 <code>develop</code> 分支。</li><li>个人的开发分支只能合并到各组的 <code>xxxx-dev</code> 分支。</li><li>大版本整体升级后，会保留前一版本的分支，如果有bug可以基于其建立<code>1.x.x-hotfix</code>分支对上面的bug进行修复。例如从<code>1.1.10</code>升级到<code>1.2.0</code>后，在<code>1.1.x</code>分支会保留<code>1.1</code>版本中所有代码，如果有bug基于<code>1.1.x</code>建立<code>1.1.x-hotfix</code>分支对bug进行修复。</li></ul><p>分支管理图如下</p><p><img src="/images/knowledge/gitManage.png" alt="分支管理图" title="分支管理图"></p><h2 id="提交规范"><a href="#提交规范" class="headerlink" title="提交规范"></a>提交规范</h2><h3 id="提交步骤"><a href="#提交步骤" class="headerlink" title="提交步骤"></a>提交步骤</h3><ol><li><code>git add</code> 后执行 <code>yarn commit</code>。</li><li>要选择提交的类型。（可选类型如下）。</li><li>要填写提交的模块，例如<code>srm-front-spfm</code>。</li><li>要填写提交说明。例如：修复xxx导致的bug。</li></ol><h3 id="提交类型"><a href="#提交类型" class="headerlink" title="提交类型"></a>提交类型</h3><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>build</td><td>主要目的是修改项目构建系统(例如 glup，webpack，rollup 的配置等)的提交</td></tr><tr><td>ci</td><td>主要目的是修改项目继续集成流程(例如 Travis，Jenkins，GitLab CI，Circle等)的提交</td></tr><tr><td>docs</td><td>文档更新</td></tr><tr><td>feat</td><td>新增功能</td></tr><tr><td>fix</td><td>bug 修复</td></tr><tr><td>perf</td><td>性能优化</td></tr><tr><td>refactor</td><td>重构代码(既没有新增功能，也没有修复 bug)</td></tr><tr><td>style</td><td>不影响程序逻辑的代码修改(修改空白字符，补全缺失的分号等)</td></tr><tr><td>test</td><td>新增测试用例或是更新现有测试</td></tr><tr><td>revert</td><td>回滚某个更早之前的提交</td></tr><tr><td>chore</td><td>不属于以上类型的其他类型</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>too many open files</title>
      <link href="/2019/06/14/notes/note1/"/>
      <url>/2019/06/14/notes/note1/</url>
      
        <content type="html"><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>前端Jenkins跑服务时候报错，怎么都跑不起来，我就去服务器手动执行脚本。在<code>build</code>阶段发现服务器报错 <code>too many open files</code>,于是去查找资料找解决方案。</p><p>这个报错是只打来文件过多，超过了系统限制的文件数量以及通讯链接数，这边的<code>files</code>不单是文件的意思，也包括打开的通讯链接(比如socket)，正在监听的端口等，也可以叫做句柄(handle)。这个错误通常也可以叫做句柄数超出系统限制。 </p><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><p>可以使用 ulimit -a 或者 ulimit -n 来查看当前系统最大句柄限制数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ulimit</span> -a</span><br><span class="line"></span><br><span class="line">core file size          (blocks, -c) 0</span><br><span class="line">data seg size           (kbytes, -d) unlimited</span><br><span class="line">scheduling priority             (-e) 0</span><br><span class="line">file size               (blocks, -f) unlimited</span><br><span class="line">pending signals                 (-i) 127922</span><br><span class="line">max locked memory       (kbytes, -l) 64</span><br><span class="line">max memory size         (kbytes, -m) unlimited</span><br><span class="line">open files                      (-n) 1024</span><br><span class="line">pipe size            (512 bytes, -p) 8</span><br><span class="line">POSIX message queues     (bytes, -q) 819200</span><br><span class="line">real-time priority              (-r) 0</span><br><span class="line">stack size              (kbytes, -s) 8192</span><br><span class="line">cpu time               (seconds, -t) unlimited</span><br><span class="line">max user processes              (-u) 127922</span><br><span class="line">virtual memory          (kbytes, -v) unlimited</span><br><span class="line">file locks                      (-x) unlimited</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">limit</span> -n</span><br><span class="line"></span><br><span class="line">1024</span><br></pre></td></tr></table></figure><p>open files那一行就代表系统目前允许单个进程打开的最大句柄数，这里是1024。 </p><p>同时使用 <code>-n</code> 查看下来也是1024。</p><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><h3 id="临时修改"><a href="#临时修改" class="headerlink" title="临时修改"></a>临时修改</h3><p><strong>ulimit -n</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ulimit</span> -n 65535</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">ulimit</span> -a</span><br><span class="line"></span><br><span class="line">core file size          (blocks, -c) 0</span><br><span class="line">data seg size           (kbytes, -d) unlimited</span><br><span class="line">scheduling priority             (-e) 0</span><br><span class="line">file size               (blocks, -f) unlimited</span><br><span class="line">pending signals                 (-i) 127922</span><br><span class="line">max locked memory       (kbytes, -l) 64</span><br><span class="line">max memory size         (kbytes, -m) unlimited</span><br><span class="line">open files                      (-n) 65535</span><br><span class="line">pipe size            (512 bytes, -p) 8</span><br><span class="line">POSIX message queues     (bytes, -q) 819200</span><br><span class="line">real-time priority              (-r) 0</span><br><span class="line">stack size              (kbytes, -s) 8192</span><br><span class="line">cpu time               (seconds, -t) unlimited</span><br><span class="line">max user processes              (-u) 127922</span><br><span class="line">virtual memory          (kbytes, -v) unlimited</span><br><span class="line">file locks                      (-x) unlimited</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">limit</span> -n</span><br><span class="line"></span><br><span class="line">65535</span><br></pre></td></tr></table></figure><p>但这种设置方法在重启后会<strong>还原为默认值</strong>。</p><p><code>ulimit -n</code>命令非root用户只能设置到4096，想要设置到更大需要sudo权限或者root用户。</p><h3 id="修改conf文件，永久配置"><a href="#修改conf文件，永久配置" class="headerlink" title="修改conf文件，永久配置"></a>修改conf文件，永久配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/security/limits.conf  </span><br><span class="line"><span class="comment">#在最后加入  </span></span><br><span class="line">* soft nofile 65535  </span><br><span class="line">* hard nofile 65535</span><br></pre></td></tr></table></figure><p><code>*</code>代表所有用户，可以给特点用户设定句柄最大数值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/security/limits.conf  </span><br><span class="line"><span class="comment">#在最后加入  </span></span><br><span class="line">jenkins soft nofile 65535  </span><br><span class="line">jenkins hard nofile 65535</span><br></pre></td></tr></table></figure><p>上面就是把jenkins用户最大句柄数改成65535</p><p>之后再查看大小的话可以发现已经修改为 65535 。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6-变量的解构</title>
      <link href="/2019/06/12/knowledge/es6/lesson_2/"/>
      <url>/2019/06/12/knowledge/es6/lesson_2/</url>
      
        <content type="html"><![CDATA[<h2 id="1-数组"><a href="#1-数组" class="headerlink" title="(1) 数组"></a>(1) 数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="literal">NaN</span>;</span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> [foo] = &#123;&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-对象"><a href="#2-对象" class="headerlink" title="(2) 对象"></a>(2) 对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = &#123; <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> &#125;;</span><br></pre></td></tr></table></figure><p>区分模式还是变量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  p: [</span><br><span class="line">    <span class="string">'Hello'</span>,</span><br><span class="line">    &#123; <span class="attr">y</span>: <span class="string">'World'</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">p</span>: [x, &#123; y &#125;] &#125; = obj;</span><br><span class="line">x <span class="comment">// "Hello"</span></span><br><span class="line">y <span class="comment">// "World"</span></span><br></pre></td></tr></table></figure></p><p>注意，这时p是模式，不是变量，因此不会被赋值<br>注意: 默认值生效的条件是，对象的属性值严格等于undefined。</p><h2 id="3-字符串"><a href="#3-字符串" class="headerlink" title="(3)字符串"></a>(3)字符串</h2><p>看做数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, c, d, e] = <span class="string">'hello'</span>;</span><br><span class="line">a <span class="comment">// "h"</span></span><br><span class="line">b <span class="comment">// "e"</span></span><br><span class="line">c <span class="comment">// "l"</span></span><br><span class="line">d <span class="comment">// "l"</span></span><br><span class="line">e <span class="comment">// "o"</span></span><br></pre></td></tr></table></figure></p><h2 id="4-数值的布尔值"><a href="#4-数值的布尔值" class="headerlink" title="(4)数值的布尔值"></a>(4)数值的布尔值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">toString</span>: s&#125; = <span class="number">123</span>;</span><br><span class="line">s === <span class="built_in">Number</span>.prototype.toString <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错</p><h2 id="5-例子"><a href="#5-例子" class="headerlink" title="(5)例子"></a>(5)例子</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">[x, y] = [y, x];</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>声声慢</title>
      <link href="/2019/05/09/others/miscellany_2/"/>
      <url>/2019/05/09/others/miscellany_2/</url>
      
        <content type="html"><![CDATA[<h2 id="声声慢"><a href="#声声慢" class="headerlink" title="声声慢"></a>声声慢</h2><p>寻寻觅觅，冷冷清清，凄凄惨惨戚戚。乍暖还寒时候，最难将息。三杯两盏淡酒，怎敌他、晚来风急！雁过也，正伤心，却是旧时相识。</p><p>满地黄花堆积，憔悴损，如今有谁堪摘？守着窗儿，独自怎生得黑！梧桐更兼细雨，到黄昏、点点滴滴。这次第，怎一个愁字了得！</p><p>怎一个愁字了得啊！</p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论部门研发项目之怪现状</title>
      <link href="/2019/05/07/others/miscellany_1/"/>
      <url>/2019/05/07/others/miscellany_1/</url>
      
        <content type="html"><![CDATA[<p>新产品开发已一年有余，每思项目中之事，无不发现其怪。此怪异有能者不作为，无能者空哀怨。。。。</p><a id="more"></a><h2 id="怪现状一、从九干到九，天长又地久"><a href="#怪现状一、从九干到九，天长又地久" class="headerlink" title="怪现状一、从九干到九，天长又地久"></a>怪现状一、从九干到九，天长又地久</h2><p>上班时间必须是早上9点上班到晚上9点下班，即使晚上没有什么工作内容。也必须坐到9点。9点已经变成一个闹钟，一个节点，甚至一个屏障。。。</p><h2 id="怪现状二、早走你就走，好评我没有"><a href="#怪现状二、早走你就走，好评我没有" class="headerlink" title="怪现状二、早走你就走，好评我没有"></a>怪现状二、早走你就走，好评我没有</h2><p>每次上班，拥有一种上学的感觉，不到点不能下课放学。只要有人早走，领导就会给黑脸看，评价降低，甚至增加工作量，强行加大开发时间。</p><h2 id="怪现状三、苦劳别埋怨，不是我心愿"><a href="#怪现状三、苦劳别埋怨，不是我心愿" class="headerlink" title="怪现状三、苦劳别埋怨，不是我心愿"></a>怪现状三、苦劳别埋怨，不是我心愿</h2><p>总有同事开玩笑说加班累，周末没有时间。领导说又不是我让你待到9点后或者周末加班的，这是你自愿的。。。。</p><h2 id="怪现状四、时间很不够，敏捷拿来凑"><a href="#怪现状四、时间很不够，敏捷拿来凑" class="headerlink" title="怪现状四、时间很不够，敏捷拿来凑"></a>怪现状四、时间很不够，敏捷拿来凑</h2><p>每次定开发时间，都是直接上层拍板定时间。对项目的开发时间和测试发布时间不能很好的估计和评测，时间很紧。产品设计后开发的时间更加紧张，领导称之为敏捷开发模式。。。</p><h2 id="怪现状五、需求天天改，结局没人采"><a href="#怪现状五、需求天天改，结局没人采" class="headerlink" title="怪现状五、需求天天改，结局没人采"></a>怪现状五、需求天天改，结局没人采</h2><p>每次需求都各种变动，多个领导，多个产品。从不同角度不同思维进行修改，最终做出个什么样子后，没人再过问，都点头说ok。</p><h2 id="怪现状六、技术常常换，项目玩不转"><a href="#怪现状六、技术常常换，项目玩不转" class="headerlink" title="怪现状六、技术常常换，项目玩不转"></a>怪现状六、技术常常换，项目玩不转</h2><p>项目人员不固定，今天来一个，明天撤项一个。代码把控一般，bug一堆，问题一堆。如何完好运行项目。</p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人摄影 - 第一期</title>
      <link href="/2019/05/06/shoot/shoot_1/"/>
      <url>/2019/05/06/shoot/shoot_1/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/shoot/img_20180519.jpg" alt="img" title="雨后，公司旁边的黄色花朵"></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>拍摄时间 - 2018年05月19日</p></blockquote><blockquote><p>地点 - 公司旁小路</p></blockquote><h2 id="闲谈"><a href="#闲谈" class="headerlink" title="闲谈"></a>闲谈</h2><p>天色阴暗，雨势渐小。雨珠在花和叶上欢乐的跳动。从叫做叶的平台跳下，落在地上，渗进土里。梦着下次和花的轮回。</p><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p><strong>图片是我自己拍的，如果要转发和使用，请打声招呼，或者注明出处。</strong></p><p><strong>请勿私自盗用，谢谢</strong></p>]]></content>
      
      
      <categories>
          
          <category> 拍照摄影 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拍照摄影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6-变量</title>
      <link href="/2019/05/06/knowledge/es6/lesson_1/"/>
      <url>/2019/05/06/knowledge/es6/lesson_1/</url>
      
        <content type="html"><![CDATA[<h2 id="let-和-const"><a href="#let-和-const" class="headerlink" title="let 和 const"></a>let 和 const</h2><p><code>let</code>声明变量，类似于<code>var</code>，但是<code>let</code>有作用域的概念。<br><code>const</code> 声明常量，一旦声明后，不可改变。<code>const</code> 声明后要立马初始化。</p><p><strong>作用域</strong></p><p>作用域顾名思义就是只有在某个区域内起作用。<code>let</code> 就只能在其作用域中起作用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a <span class="comment">// ReferenceError: a is not defined.</span></span><br><span class="line">b <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p><strong>变量提升</strong></p><p><code>var</code> 命令会发生“变量提升”现象，即变量可以在声明之前使用，值为undefined。</p><p><code>let</code> 定义的变量如果在声明之前使用会报错。</p><p><strong>暂时性死区</strong></p><p>如果区块中存在<code>let</code>和<code>const</code>命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域（暂时性死区）。凡是在声明之前就使用这些变量，就会报错。</p><p><strong>重复声明</strong></p><p><code>let</code>不允许在相同作用域内，重复声明同一个变量。</p><p><strong>const本质</strong></p><p><code>const</code>实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。</p><p>对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，<code>const</code>只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。</p><h2 id="global对象"><a href="#global对象" class="headerlink" title="global对象"></a>global对象</h2><p>顶层对象，在浏览器环境指的是<code>window</code>对象，在 <code>Node</code> 指的是<code>global</code>对象。</p><p>ES5 之中，顶层对象的属性与全局变量是等价的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.a = <span class="number">1</span>;</span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">window</span>.a <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p><ul><li>为了保持兼容性，<code>var</code>命令和<code>function</code>命令声明的全局变量，依旧是顶层对象的属性；</li><li><code>let</code>命令、<code>const</code>命令、class命令声明的全局变量，不属于顶层对象的属性</li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源</title>
      <link href="/2019/04/30/others/start/"/>
      <url>/2019/04/30/others/start/</url>
      
        <content type="html"><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>我一直是一个不太喜欢写博客和文章的人，从业这么久，不喜欢去csdn或者博客园去发布文章。总觉得有时间还是看看书，娱乐娱乐比较好。忽然觉得有一个属于自己的地方，发点自己想想写的挺不错的。</p><h2 id="打算"><a href="#打算" class="headerlink" title="打算"></a>打算</h2><p>想利用这个博客写点自己的东西，不论是技术分享还是技术笔记，或者生活杂记，都记录下来。例如拍个照片，可以发上来，这是一种记忆。</p><h2 id="Emmmm"><a href="#Emmmm" class="headerlink" title="Emmmm"></a>Emmmm</h2><p>其实也不知道说什么好，总之，希望利用好这个博客吧。</p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
